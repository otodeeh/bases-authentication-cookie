generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  email         String   @unique
  loginAttempts Int      @default(3)
  name          String
  password      String
  updatedAt     DateTime @updatedAt

  Notification           Notification[]
  UserAction             UserAction[]
  UserNotificationConfig UserNotificationConfig?
  RefreshToken           RefreshToken[]
}

model RefreshToken {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  tokenHash    String    @unique
  deviceId     String
  userAgent    String?
  createdAt    DateTime  @default(now())
  expiresAt    DateTime
  rotatedAt    DateTime?
  revoked      Boolean   @default(false)
  revokedAt    DateTime?
  replacedById String?   @unique

  replacedBy RefreshToken? @relation("TokenRotation", fields: [replacedById], references: [id])
  replaced   RefreshToken? @relation("TokenRotation")
}

model UserNotificationConfig {
  id            String  @id @default(uuid())
  optInApp      Boolean @default(false)
  optInEmail    Boolean @default(false)
  optInWhatsApp Boolean @default(false)
  userId        String  @unique

  User User @relation(fields: [userId], references: [id])
}

model Notification {
  id        String             @id @default(uuid())
  accountId Int
  createdAt DateTime           @default(now())
  data      Json
  readAt    DateTime?
  status    NotificationStatus @default(NOTIFY)
  type      NotificationType
  updatedAt DateTime           @default(now()) @updatedAt
  userId    String

  User User? @relation(fields: [userId], references: [id])
}

enum NotificationStatus {
  NOTIFY
  NOTIFIED
}

enum NotificationType {
  NEW_ORDER
  CANCELLED_ORDER
  PAYMENT_SUCCESSFULLY
  PAYMENT_DECLINED
  UPDATED_ORDER
  NEW_SERVICE_ORDER
  CANCELLED_SERVICE_ORDER
  UPDATED_SERVICE_ORDER
  CLOSED_SERVICE_ORDER
}

model UserAction {
  id           String     @id @default(uuid())
  actionType   ActionType
  createdAt    DateTime   @default(now())
  entity       String
  entityKey    String
  payload      Json
  success      Boolean
  errorMessage String?
  userId       String

  User User @relation(fields: [userId], references: [id])
}

enum ActionType {
  CREATE
  DELETE
  UPDATE
}

model ErrorLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  context   String
  error     Json
}

model File {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  description String?
  extension   String
  url         String
  relatedType String // Ex: "User", "Order", "Product"
  relatedId   String // ID da entidade relacionada
}
